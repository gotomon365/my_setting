#+startup: hidestars

* 3.4 List的順序存儲結構
#+BEGIN_SRC c
    #define MAZSIZE 20
    typedef in ElemType;
    typedef struct
    {
	ElemType data[MAXSIZE];
	int length;
    }SqList;
#+END_SRC

* 3.5 順序存儲結構的插入與刪除
  #+BEGIN_SRC c
    #define OK 1
    #define ERROR 0
    #define TRUE 1
    #define FALSE 0
    typedef int Status;
  #+END_SRC

** 3.5.1 取得元素操作
   #+BEGIN_SRC c
   Status GetElem(SqList L, int i, ElemType *e)
    {
	if (L.length == 0 || i < 1 || i > L.length)
	    return ERROR;
	,*e = L.data[i-1];
	return OK;
    }
   #+END_SRC

** 3.5.2 插入元素操作
   #+BEGIN_SRC c
     Status ListInsert(SqList *L, int i, ElemType e)
     {
	 int k;
	 if (L->length == MAXSIZE) {
	     return ERROR;
	 }
	 if (i < 1 || i > L->length+1) {
	     return ERROR;
	 }
	 if (i <=L->length-1) {
	     for (k = L->length -1; k>= i-1; k--) {
		 L->data[k+1] = L->data[k];
	     }
	 }
	 L->data[i-1] = e;
	 L->length++;
	 return OK;
     }

   #+END_SRC
** 3.5.3 刪除元素操作
   #+BEGIN_SRC c
     Status ListDelete(SqList *L, int i, ElemType *e)
     {
	 int k;
	 if (L->length == 0) {
	     return ERROR;
	 }
	 if (i < 1 || i > L->length) {
	     return ERROR;
	 }
	 ,*e = L->data[i-1];
	 if (i < L->length) {
	     for (k = i; k < L->length; k++) {
		 L->data[k-1] = L->data[k];
	     }

	 }
	 L->lenght--;
	 return OK;
     }
   #+END_SRC
