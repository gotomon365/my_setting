* FIRST
  #+BEGIN_SRC c
    /*
     ,* This program reads input lines from standard input and prints
     ,* each input line, followed by just some portions of the line, to
     ,* the standard output.
     ,*
     ,* The first input is a lint of column numbers, which ends with a
     ,* negative number. The column numbers are paired and specify
     ,* ranges of columns from the input line tthat are to be printed.
     ,* For example, 0 3 10 12 -1 indicates that only columns 0 throught 3
     ,* and columns 10 through 12 be printed.
     ,*/

    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #define MAX_COLS 20    // max # of columns to process 
    #define MAX_INPUT 10    //max len of input & output lines

    int read_column_numbers(int columns[], int max);
    void rearrange(char *output, char const *input,
		   int n_columns, int const columns[]);

    int main(int argc, char *argv[])
    {
      int n_columns;
      int columns[MAX_COLS];
      char input[MAX_INPUT];
      char output[MAX_INPUT];

      // Read the list of column numbers
      n_columns = read_column_numbers(columns, MAX_COLS);

      //Read, process and print the remaiing lines of input

      while (gets(input) != NULL) {
	printf("Original input : %s\n", input);
	rearrange(output, input, n_columns, columns);
	printf("Rearranged line : %s\n", output);
      }

      return EXIT_SUCCESS;
  
      return 0;
    }

    int
    read_column_numbers(int columns[], int max)
    {
      int num = 0;
      int ch;

      // Get the numbers, stopping at eof or when a number is < 0.
      while (num < max && scanf("%d", &columns[num]) == 1
	     && columns[num] >= 0) {
	num++;
    
      }
      if (num % 2 != 0) {
	puts("Last column number is not paired.");
	exit(EXIT_FAILURE);
      }

      while ((ch = getchar()) != EOF && ch != '\n')
	;
    
      return num;
    }

    void
    rearrange(char *output, char const *input,
	      int n_columns, int const columns[])
    {
      int col;
      int output_col;
      int len;

      len = strlen(input);
      output_col = 0;

      for (col = 0; col < n_columns; col += 2) {
	int nchars = columns[col+1] - columns[col] + 1;
	if (columns[col] >= len ||
	    output_col == MAX_INPUT - 1) {
	  break;
	}

	if (output_col + nchars > MAX_INPUT - 1) {
	  nchars = MAX_INPUT - output_col -1;
	}
	strncpy(output+ output_col, input + columns[col],
		nchars);
	output_col += nchars;
      }

      output[output_col] = '\0';
    }


  #+END_SRC
* 3
** 3.1
   #+BEGIN_SRC c
     #include <stdio.h>
     #include <string.h>


     int main(int argc, char *argv[])
     {
       // receive n
       int n = 0;
       printf("Enter a number: ");
       scanf(" %d", &n);
  
       // do
       double next = (n + (n / n)) / 2;
       while( next != (next + (n / next)) / 2)
	 {
	   next = (next + (n / next)) / 2;
	 }
       // print result
       printf("%lf\n", next);
       return 0;
     }



   #+END_SRC
** 3.2
   #+BEGIN_SRC c
     #include <stdio.h>

     int prime[100] = {2, 3, 5};

     int main(int argc, char *argv[])
     {
       int index = 3;
       int is_prime = 1;
       for (int i =7; i <= 100; ++i) {
	 is_prime = 1;
	 for (int j = 0; j < index; ++j) {
	   if (i % prime[j] == 0) {
	     is_prime = 0;
	     break;
	   }
	 }
	 if (is_prime) {
	   prime[index++] = i;
	 }
       }

       for (int i = 0 ; i < index; ++i) {
	 printf("%d ", prime[i]);
       }
       printf("\n");

       return 0;
     }


   #+END_SRC
** 3.3
   #+BEGIN_SRC c
     #include <stdio.h>

     #define and &&
     #define or ||

     void
     swap(int *a, int *b);

     int main(int argc, char *argv[])
     {
       int a, b, c;
       scanf(" %d%d%d", &a, &b, &c);
       swap(&a, &b);
       swap(&b, &c);

       if (c < a + b) {
	 if (a == b and b == c) {
	   printf("3\n");
	 }
	 else if (a == b or b == c or a == c) {
	   printf("2\n");
	 } 
	   else {
	     printf("just a tri\n");
	   }
   
       }
       else
	 printf("It's wrong\n");
  
       return 0;
     }

     void
     swap(int *a, int *b)
     {
       int temp;
       temp = *a;
       ,*a = *a * (*a <= *b) + *b * (*a > *b);
       ,*b = temp * ( temp >= *b) + *b * (temp < *b);
     }

   #+END_SRC
